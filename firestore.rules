
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDeliveryPartner() {
      // In a real app, you would check a custom claim or a role in the user's profile document.
      // For this prototype, we'll assume any authenticated user could be a partner.
      return isAuthenticated();
    }
    
    function isAssignedPartner(order) {
      return isDeliveryPartner() && request.auth.uid == order.deliveryPartnerId;
    }

    // --- Public Collections ---
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated(); 
    }

    match /promoCodes/{promoId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // --- User & Partner Collections ---
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      // Allow partners to read a limited set of their own subcollections
      match /monthlyEarnings/{earningId} {
        allow read: if isOwner(userId);
      }
    }
    match /sessions/{sessionId} {
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId);
    }
    
    match /chatThreads/{threadId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
      }
    }
    
    match /supportChats/{chatId} {
      allow read, create: if isOwner(resource.data.userId);
      match /messages/{messageId} {
        allow read, create: if isOwner(get(/databases/$(database)/documents/supportChats/$(chatId)).data.userId);
      }
    }

    // --- Orders Collection: The Core Logic ---
    match /orders/{orderId} {
      // 1. CREATE: Only a customer can create their own order.
      allow create: if isOwner(request.resource.data.userId);

      // 2. READ: 
      //    - The customer can always read their own order.
      //    - An assigned delivery partner can read the order.
      allow read: if isOwner(resource.data.userId) || isAssignedPartner(resource.data);
      
      // 3. UPDATE:
      //    - The customer can update their order (e.g., add instructions) before it's assigned.
      //    - A delivery partner can accept an order (update deliveryPartnerId from null).
      //    - An assigned partner can update the order status (e.g., to 'delivered').
      allow update: if (isOwner(resource.data.userId) && resource.data.deliveryPartnerId == null) ||
                     (isDeliveryPartner() && request.resource.data.deliveryPartnerId == request.auth.uid);

      // 4. LIST (Queries):
      //    - Customers can list their own orders.
      //    - Partners can list unassigned orders.
      //    - Partners can list orders assigned to them.
      allow list: if (isOwner(request.query.where.userId)) ||
                   (isDeliveryPartner() && request.query.where.deliveryPartnerId == request.auth.uid) ||
                   (isDeliveryPartner() && request.query.where.deliveryPartnerId == null && request.query.where.orderStatus == 'Placed');
    }
  }
}
