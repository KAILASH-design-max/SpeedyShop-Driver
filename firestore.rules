rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // --- Public Collections ---
    match /products/{productId} {
      allow read: if true;
      // Allow writes for seeding/admin in this prototype
      allow write: if isAuthenticated(); 
    }

    match /promoCodes/{promoId} {
      allow read: if true;
      // Allow writes for seeding/admin
      allow write: if isAuthenticated();
    }
    
    // --- User-Centric Collections ---

    // Generic rule for collections where documents contain a `userId` field
    // and queries will always filter by it.
    function isQueryingOwnData() {
      return isAuthenticated() && request.query.where.userId == request.auth.uid;
    }

    // Addresses: Users can manage their own addresses.
    match /addresses/{addressId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isQueryingOwnData();
    }
    
    // Payment Methods: Users can manage their own payment methods.
    match /paymentMethods/{paymentMethodId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isQueryingOwnData();
    }

    // Wishlists: Users can manage their own wishlists.
    match /MyWishlist/{wishlistId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isQueryingOwnData();
    }
    
    // Reviews: Users can create their own reviews. Anyone can read reviews.
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isOwner(request.resource.data.userId);
        allow list: if request.query.where.productId is string || isQueryingOwnData();
    }

    // Security & Notifications: Settings are private to the user.
    match /SecuritySupport/{userId} {
        allow read, write: if isOwner(userId);
    }
    match /NotificationSettings/{userId} {
        allow read, write: if isOwner(userId);
    }
    
    // Application Forms: Authenticated users can submit applications.
    match /Franchise/{docId} {
        allow create: if isOwner(request.resource.data.userId);
    }
    match /PartnerWithUs/{docId} {
        allow create: if isOwner(request.resource.data.userId);
    }
     match /Seller/{docId} {
        allow create: if isOwner(request.resource.data.userId);
    }

    // Orders:
    // This rule allows a user OR a delivery partner to access an order.
    // This is achieved by having an `accessibleTo` array field on each order
    // document containing the UIDs of users who can access it (customer, partner).
    match /orders/{orderId} {
      // Allow read/write if the user's UID is in the `accessibleTo` array.
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.accessibleTo;

      // Allow create if the user is the one creating it.
      // A backend function should then populate accessibleTo with the customer's UID.
      allow create: if isOwner(request.resource.data.userId);
      
      // Allow list operations (queries) only if filtering by the accessibleTo array.
      // This is the key change for dashboard queries.
      allow list: if isAuthenticated() && request.query.where.accessibleTo is array;
    }
    
    // --- Legacy and Other Collections ---
    // Customer/User profiles
    match /customers/{userId} {
      allow read, write: if isOwner(userId);
    }

    // A general 'users' collection, if used for delivery partners or other roles.
    match /users/{userId} {
        allow read, write: if isOwner(userId);
    }

    // Sessions are private to the user who created them
    match /sessions/{sessionId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isOwner(resource.data.userId);
    }
  }
}
