
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDeliveryPartner() {
      // In this app, any authenticated user can be a partner.
      // In a production app, you might check for a specific role claim.
      // e.g. request.auth.token.role == 'deliveryPartner'
      return isAuthenticated();
    }

    // --- Public Collections ---
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated(); // For seeding/admin
    }

    match /promoCodes/{promoId} {
      allow read: if true;
      allow write: if isAuthenticated(); // For seeding/admin
    }
    
    // --- User & Partner Profile ---
    match /users/{userId} {
      // A user can read and write to their own profile.
      allow read, write: if isOwner(userId);
    }
    match /users/{userId}/{document=**} {
       // A user can read and write to their own subcollections (e.g., monthlyEarnings)
      allow read, write: if isOwner(userId);
    }

    // --- Order Logic ---
    match /orders/{orderId} {
      // READ: An order can be read by its owner (customer) or the assigned delivery partner.
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.deliveryPartnerId != null && isOwner(resource.data.deliveryPartnerId));
      
      // UPDATE: 
      // Rule 1: The customer can update their own order (e.g. add instructions before pickup).
      // Rule 2: A delivery partner can update an order assigned to them.
      // Rule 3: A delivery partner can accept an unassigned order.
      allow update: if (isOwner(resource.data.userId)) || 
                      (resource.data.deliveryPartnerId != null && isOwner(resource.data.deliveryPartnerId)) ||
                      (isDeliveryPartner() && request.resource.data.deliveryPartnerId == request.auth.uid);

      // LIST:
      // Rule 1: A user can list their own orders.
      // Rule 2: A delivery partner can list orders assigned to them.
      // Rule 3: A delivery partner can list new, unassigned orders.
      allow list: if (isAuthenticated() && request.query.where.userId == request.auth.uid) ||
                    (isDeliveryPartner() && request.query.where.deliveryPartnerId == request.auth.uid) ||
                    (isDeliveryPartner() && request.query.where.deliveryPartnerId == null && request.query.where.orderStatus == "Placed");

      // CREATE: Only a customer can create an order for themselves.
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // --- Chat Logic ---
    match /chatThreads/{threadId} {
        // Users can read/write to chat threads they are a part of.
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    match /chatThreads/{threadId}/messages/{messageId} {
        // Users can create messages in threads they are part of.
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
        // All participants can read all messages in the thread.
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
    }

    // --- Support Chat Logic ---
     match /supportChats/{chatId} {
        allow read, write: if isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
     }
     match /supportChats/{chatId}/messages/{messageId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/supportChats/$(chatId)).data.userId);
     }

    // --- Session tracking for active time ---
    match /sessions/{sessionId} {
      // Users can only create sessions for themselves.
      allow create: if isOwner(request.resource.data.userId);
      // Once created, only the server should update the logout time.
      allow read, update: if isOwner(resource.data.userId);
    }

  }
}
