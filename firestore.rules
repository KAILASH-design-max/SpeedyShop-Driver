
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Is the user the owner of the document (based on a `userId` field)
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Is the user the assigned delivery partner for a given order
    function isAssignedPartner(order) {
      return isAuthenticated() && order.deliveryPartnerId == request.auth.uid;
    }

    // --- USER PROFILE & DATA ---
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /users/{userId}/{document=**} {
        allow read, write: if isOwner(userId);
    }
     match /sessions/{sessionId} {
      allow create: if isOwner(request.resource.data.userId);
      allow write: if isOwner(resource.data.userId);
    }
    
    // --- ORDERS ---
    match /orders/{orderId} {

      // READ: A user can read an order if they are the customer OR the assigned partner.
      allow read: if isOwner(resource.data.userId) || isAssignedPartner(resource.data);

      // LIST (QUERY):
      allow list: if 
          // Rule for CUSTOMERS to list their own orders.
          (isAuthenticated() && request.query.where.userId == request.auth.uid) ||
          // Rule for PARTNERS to list NEW orders.
          (isAuthenticated() && request.query.where.deliveryPartnerId == null && request.query.where.orderStatus == "Placed") ||
          // Rule for PARTNERS to list their own ACTIVE orders.
          (isAuthenticated() && request.query.where.deliveryPartnerId == request.auth.uid && request.query.where.orderStatus in ["accepted", "picked-up", "out-for-delivery"]) ||
          // Rule for PARTNERS to list their own COMPLETED/CANCELLED orders for history.
          (isAuthenticated() && request.query.where.deliveryPartnerId == request.auth.uid && request.query.where.orderStatus in ["delivered", "cancelled"]);
      
      // UPDATE:
      allow update: if 
          // A CUSTOMER can update their own order (e.g., to cancel before it's accepted).
          (isOwner(resource.data.userId)) ||
          
          // A PARTNER can accept an order (moving it from unassigned to assigned to them).
          (isAuthenticated() && resource.data.deliveryPartnerId == null && request.resource.data.deliveryPartnerId == request.auth.uid) ||
          
          // A PARTNER can update an order that is already assigned to them.
          (isAssignedPartner(resource.data));

      // CREATE: Only a customer can create an order for themselves.
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // --- LEGACY/UNUSED COLLECTIONS (from previous rulesets for safety) ---
    match /customers/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    match /promoCodes/{promoCodeId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.userId);
    }
    match /Franchise/{docId} { allow create: if isAuthenticated(); }
    match /PartnerWithUs/{docId} { allow create: if isAuthenticated(); }
    match /Seller/{docId} { allow create: if isAuthenticated(); }
    match /addresses/{addressId} { allow read, write: if isOwner(resource.data.userId); }
    match /paymentMethods/{methodId} { allow read, write: if isOwner(resource.data.userId); }
    match /NotificationSettings/{userId} { allow read, write: if isOwner(userId); }
    match /SecuritySupport/{userId} { allow read, write: if isOwner(userId); }
    match /MyWishlist/{wishlistId} { allow read, write: if isOwner(resource.data.userId); }
    match /returns/{returnId} { allow read, write: if isOwner(resource.data.userId); }
  }
}
