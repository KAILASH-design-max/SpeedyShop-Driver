rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // --- Public Collections ---
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated(); 
    }

    match /promoCodes/{promoId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // --- User-Centric Collections ---
    match /addresses/{addressId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
    }
    
    match /paymentMethods/{paymentMethodId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
    }

    match /MyWishlist/{wishlistId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
    }
    
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isOwner(request.resource.data.userId);
        allow list: if request.query.where.productId is string || (isAuthenticated() && request.query.where.userId == request.auth.uid);
    }

    // --- App-Specific Collections ---
    match /users/{userId} {
      allow read, write: if isOwner(userId);

      // User subcollections
      match /monthlyEarnings/{month} {
          allow read, write: if isOwner(userId);
      }
    }

    match /sessions/{sessionId} {
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId);
    }
    
    match /supportChats/{chatId} {
        allow create: if isOwner(request.resource.data.userId);
        match /messages/{messageId} {
            allow write: if isOwner(get(/databases/$(database)/documents/supportChats/$(chatId)).data.userId);
            allow read: if isOwner(get(/databases/$(database)/documents/supportChats/$(chatId)).data.userId);
        }
    }

    match /chatThreads/{threadId} {
        allow read, update: if request.auth.uid in resource.data.participantIds;
        match /messages/{messageId} {
            allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
        }
    }

    // --- Orders Collection ---
    // This is the most complex rule set. It must handle customers and delivery partners.
    match /orders/{orderId} {
      // CUSTOMER permissions: A customer can create an order for themselves, and can read/update their own orders.
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isOwner(resource.data.userId);

      // DELIVERY PARTNER permissions:
      // An authenticated user (a driver) can read/update an order IF they are the assigned delivery partner.
      allow read, update: if isAuthenticated() && resource.data.deliveryPartnerId == request.auth.uid;
      
      // A driver can ACCEPT an order if it's unassigned (deliveryPartnerId is null)
      // and the update is only changing the deliveryPartnerId to their own and status to 'accepted'.
      allow update: if isAuthenticated() 
                      && resource.data.deliveryPartnerId == null
                      && request.resource.data.deliveryPartnerId == request.auth.uid
                      && request.resource.data.orderStatus == 'accepted';

      // LIST permissions for queries. This is where permission errors often happen.
      allow list: if 
        // Allow CUSTOMERS to query for their own orders.
        (isAuthenticated() && request.query.where.userId == request.auth.uid) ||
        
        // Allow DRIVERS to query for unassigned orders.
        (isAuthenticated() 
            && request.query.where.orderStatus == 'Placed' 
            && request.query.where.deliveryPartnerId == null) ||
            
        // Allow DRIVERS to query for their assigned active orders.
        (isAuthenticated() 
            && request.query.where.deliveryPartnerId == request.auth.uid
            && request.query.where.orderStatus in ['accepted', 'picked-up', 'out-for-delivery']) ||
            
        // Allow DRIVERS to query for their completed/cancelled orders on a specific date.
        (isAuthenticated()
            && request.query.where.deliveryPartnerId == request.auth.uid
            && request.query.where.orderStatus in ['delivered', 'cancelled']);
    }
  }
}
