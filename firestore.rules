
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDeliveryPartner(order) {
        return isAuthenticated() && request.auth.uid == order.deliveryPartnerId;
    }

    // --- Public Collections ---
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated(); // For seeding/admin in this prototype.
    }

    match /promoCodes/{promoId} {
      allow read: if true;
      allow write: if isAuthenticated(); // For seeding/admin purposes.
    }

    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isOwner(request.resource.data.userId);
    }
    
    // --- User-Centric Collections ---
    match /customers/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Delivery Partner or other user profiles
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User-specific private sub-collections
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // --- Orders Collection ---
    match /orders/{orderId} {
      // READ: An order can be read by the customer who created it OR by the assigned delivery partner.
      allow read: if isOwner(resource.data.userId) || isDeliveryPartner(resource.data);
      
      // CREATE: An order can only be created by the customer themselves.
      allow create: if isOwner(request.resource.data.userId);

      // UPDATE: 
      // 1. The customer can update their order (e.g. add instructions) before it's assigned.
      // 2. The delivery partner can update the order status or accept the order.
      allow update: if (isOwner(resource.data.userId) && resource.data.deliveryPartnerId == null) || 
                      (isDeliveryPartner(resource.data)) ||
                      (isAuthenticated() && request.resource.data.deliveryPartnerId == request.auth.uid);
                      
      // LIST: We will rely on the per-document read rules. 
      // Client queries must be specific (e.g., where('deliveryPartnerId', '==', auth.uid))
      // Broad list queries will be denied by read rule checks on each document.
    }

    // --- Other Private Collections ---
    match /addresses/{addressId} {
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isOwner(resource.data.userId);
    }

    match /paymentMethods/{methodId} {
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isOwner(resource.data.userId);
    }
    
    match /NotificationSettings/{userId} {
        allow read, write: if isOwner(userId);
    }
    
    match /SecuritySupport/{userId} {
        allow read, write: if isOwner(userId);
    }

    match /MyWishlist/{wishlistId} {
        allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
    }

    match /returns/{returnId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, list: if isOwner(resource.data.userId);
    }

     // --- Application Forms ---
    match /Franchise/{docId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    match /PartnerWithUs/{docId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
     match /Seller/{docId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // --- Chat Threads ---
    match /chatThreads/{threadId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    match /chatThreads/{threadId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
    }
    
    // --- Sessions for Active Time Tracking ---
    match /sessions/{sessionId} {
        allow read, create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow update: if isAuthenticated() && isOwner(resource.data.userId);
        allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
    }
  }
}
