
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection (delivery partner profiles)
    // A user can read and write to their own document.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Rules for user-specific subcollections like monthlyEarnings
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
      // READ: An order can be read by the assigned delivery partner OR the customer.
      allow read: if isAuthenticated() && 
                    (resource.data.deliveryPartnerId == request.auth.uid || resource.data.userId == request.auth.uid);

      // UPDATE: 
      // 1. An unassigned order can be accepted by a driver.
      // 2. An assigned order can be updated by that specific driver.
      allow update: if isAuthenticated() &&
                     ((request.resource.data.deliveryPartnerId == request.auth.uid && resource.data.deliveryPartnerId == null) || 
                      (resource.data.deliveryPartnerId == request.auth.uid));

      // LIST:
      // 1. A driver can query for their own active orders.
      // 2. Any authenticated driver can query for new, unassigned orders.
      allow list: if isAuthenticated() && 
                   ((request.query.where.deliveryPartnerId == request.auth.uid) || 
                    (request.query.where.deliveryPartnerId == null && request.query.where.orderStatus == 'Placed'));
    }

    // Rules for chat functionality
    match /chatThreads/{threadId} {
      // Allow read/write if the user is a participant in the chat
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    match /chatThreads/{threadId}/messages/{messageId} {
       // Allow read/write to messages subcollection if user is participant in parent thread
      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
    }

    // Rules for support chat
     match /supportChats/{chatId} {
        allow read, create: if isAuthenticated() && (request.resource.data.userId == request.auth.uid || resource.data.userId == request.auth.uid);
     }
     match /supportChats/{chatId}/messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/supportChats/$(chatId)).data.userId == request.auth.uid;
     }

    // Rules for login/logout sessions
    match /sessions/{sessionId} {
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}
