rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDriver() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'deliveryPartner';
    }

    // Users can read and update their own profile document.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
    }
    
    // Sessions can be created by authenticated users, and can only be read/updated by their owner.
    match /sessions/{sessionId} {
      allow create: if isAuthenticated();
      allow read, update: if isOwner(resource.data.userId);
    }

    // Notifications can only be accessed by the user they are intended for.
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
    }
    
    // Delivery locations are updated by drivers, and can be read by the customer associated with the order.
    match /deliveryLocations/{orderId} {
      allow read: if isAuthenticated(); // More specific rule could check against order's customerId
      allow write: if isDriver();
    }
    
    // Delivery partner ratings can be written by any authenticated user (customer), but only read by the driver.
    match /deliveryPartnerRatings/{ratingId} {
      allow create: if isAuthenticated();
      allow read: if isOwner(resource.data.deliveryPartnerId);
    }
    
    // Drivers can read orders assigned to them or available to them.
    // They can only update orders assigned to them.
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                    (request.auth.uid == resource.data.deliveryPartnerId || request.auth.uid in resource.data.accessibleTo);
      
      // Drivers can update specific fields if they are the assigned partner
      allow update: if isAuthenticated() && request.auth.uid == resource.data.deliveryPartnerId;
    }
    
    // Support messages can be created by the user, and read by the user. Agents access via admin SDK.
    match /supportMessages/{sessionId} {
       allow read, create, update: if isOwner(resource.data.userId);
       match /messages/{messageId} {
         allow read, create: if isOwner(get(/databases/$(database)/documents/supportMessages/$(sessionId)).data.userId);
       }
    }
    
    // Drivers can read announcements. Writing is admin-only (not from client).
    match /announcements/{channelId} {
      allow read: if isAuthenticated();
      match /messages/{messageId} {
        allow read: if isAuthenticated();
      }
    }

    // Customer-to-Driver chat. Participants can read/write.
    match /Customer&deliveryboy/{threadId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/Customer&deliveryboy/$(threadId)).data.participantIds;
        }
    }

    // Stores can be read by any authenticated user.
    match /stores/{storeId} {
        allow read: if isAuthenticated();
    }
  }
}
