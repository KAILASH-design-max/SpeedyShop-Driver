rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDeliveryPartner(order) {
        return isAuthenticated() && request.auth.uid == order.deliveryPartnerId;
    }

    // --- Public Collections ---
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated(); 
    }

    match /promoCodes/{promoCodeId} {
        allow read: if true;
        allow write: if isAuthenticated();
    }

    // --- User-Centric & Partner Collections ---

    function isQueryingOwnData() {
      return isAuthenticated() && request.query.where.userId == request.auth.uid;
    }

    match /addresses/{addressId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isOwner(resource.data.userId);
      allow list: if isQueryingOwnData();
    }

    match /paymentMethods/{paymentMethodId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isOwner(resource.data.userId);
      allow list: if isQueryingOwnData();
    }

    match /MyWishlist/{wishlistId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isOwner(resource.data.userId);
      allow list: if isQueryingOwnData();
    }

    match /reviews/{reviewId} {
        allow read: if true;
        allow list: if true;
        allow create: if isOwner(request.resource.data.userId);
    }
    
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // Orders:
    // - Customers can manage their own orders.
    // - Delivery partners can manage assigned orders or accept unassigned ones.
    match /orders/{orderId} {
      // Create: Only the customer can create an order.
      allow create: if isOwner(request.resource.data.userId);

      // Read: The customer or the assigned delivery partner can read.
      allow read: if isOwner(resource.data.userId) || isDeliveryPartner(resource.data);

      // Update:
      // - The customer can update their own order.
      // - A delivery partner can accept an order (deliveryPartnerId is changing from null to their UID).
      // - An assigned delivery partner can update the order (e.g., change status).
      allow update: if isOwner(resource.data.userId) || 
                     (isAuthenticated() && request.resource.data.deliveryPartnerId == request.auth.uid && resource.data.deliveryPartnerId == null) ||
                     isDeliveryPartner(resource.data);
      
      // List:
      // - Customers can list their own orders.
      // - Delivery partners can list unassigned orders.
      // - Delivery partners can list orders assigned to them.
      allow list: if (isAuthenticated() && request.query.where.userId == request.auth.uid) ||
                   (isAuthenticated() && request.query.where.deliveryPartnerId == null) ||
                   (isAuthenticated() && request.query.where.deliveryPartnerId == request.auth.uid);
    }

    // --- Other Private Collections ---
    match /SecuritySupport/{userId} {
        allow read, write: if isOwner(userId);
    }
    match /NotificationSettings/{userId} {
        allow read, write: if isOwner(userId);
    }
    
    match /Franchise/{docId} {
        allow create: if isOwner(request.resource.data.userId);
    }
    match /PartnerWithUs/{docId} {
        allow create: if isOwner(request.resource.data.userId);
    }
     match /Seller/{docId} {
        allow create: if isOwner(request.resource.data.userId);
    }

    match /returns/{returnId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update: if isOwner(resource.data.userId);
        allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
    }
  }
}
